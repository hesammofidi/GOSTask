// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(IdentityDatabaseContext))]
    [Migration("20240311093438_RemoveNameFromTBLs")]
    partial class RemoveNameFromTBLs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Permisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Domain.SystemPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermisionsId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SystemsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("systemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermisionsId");

                    b.HasIndex("SystemsId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("systemId");

                    b.HasIndex("PermissionId", "systemId")
                        .IsUnique();

                    b.ToTable("SystemPermission");
                });

            modelBuilder.Entity("Domain.SystemRoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SystemsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("systemId")
                        .HasColumnType("int");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DomainUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolesId");

                    b.HasIndex("SystemsId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("usersId");

                    b.HasIndex("systemId", "RoleId", "usersId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL AND [usersId] IS NOT NULL");

                    b.ToTable("SystemRoleUser");
                });

            modelBuilder.Entity("Domain.SystemRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SystemsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("systemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.HasIndex("SystemsId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("systemId");

                    b.HasIndex("RoleId", "systemId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.ToTable("SystemRoles");
                });

            modelBuilder.Entity("Domain.SystemRolesPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermisionsId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SystemPermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("SystemRolesId")
                        .HasColumnType("int");

                    b.Property<int?>("SystemsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("systemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermisionsId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolesId");

                    b.HasIndex("SystemPermissionId");

                    b.HasIndex("SystemRolesId");

                    b.HasIndex("SystemsId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("systemId");

                    b.HasIndex("PermissionId", "systemId", "RoleId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.ToTable("SystemRolesPermission");
                });

            modelBuilder.Entity("Domain.SystemUserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermisionsId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SystemsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("systemId")
                        .HasColumnType("int");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DomainUserId");

                    b.HasIndex("PermisionsId");

                    b.HasIndex("SystemsId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("systemId");

                    b.HasIndex("usersId");

                    b.HasIndex("PermissionId", "systemId", "usersId")
                        .IsUnique()
                        .HasFilter("[usersId] IS NOT NULL");

                    b.ToTable("SystemUserPermission");
                });

            modelBuilder.Entity("Domain.SystemUserRolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermisionsId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SystemRolesId")
                        .HasColumnType("int");

                    b.Property<int?>("SystemsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("systemId")
                        .HasColumnType("int");

                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DomainUserId");

                    b.HasIndex("PermisionsId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolesId");

                    b.HasIndex("SystemRolesId");

                    b.HasIndex("SystemsId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("systemId");

                    b.HasIndex("usersId");

                    b.HasIndex("PermissionId", "systemId", "RoleId", "usersId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL AND [usersId] IS NOT NULL");

                    b.ToTable("SystemUserRolePermission");
                });

            modelBuilder.Entity("Domain.Systems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "identity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "identity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<string>");

                    b.HasDiscriminator().HasValue("IdentityRole");
                });

            modelBuilder.Entity("Domain.Users.DomainUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<string>");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("DomainUser");
                });

            modelBuilder.Entity("Domain.Roles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Roles");
                });

            modelBuilder.Entity("Domain.SystemPermission", b =>
                {
                    b.HasOne("Domain.Permisions", null)
                        .WithMany("SystemPermision")
                        .HasForeignKey("PermisionsId");

                    b.HasOne("Domain.Permisions", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Systems", null)
                        .WithMany("SystemPermission")
                        .HasForeignKey("SystemsId");

                    b.HasOne("Domain.Systems", "System")
                        .WithMany()
                        .HasForeignKey("systemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("System");
                });

            modelBuilder.Entity("Domain.SystemRoleUser", b =>
                {
                    b.HasOne("Domain.Users.DomainUser", null)
                        .WithMany("SystemRoleUser")
                        .HasForeignKey("DomainUserId");

                    b.HasOne("Domain.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Roles", null)
                        .WithMany("SystemRoleUser")
                        .HasForeignKey("RolesId");

                    b.HasOne("Domain.Systems", null)
                        .WithMany("SystemRoleUser")
                        .HasForeignKey("SystemsId");

                    b.HasOne("Domain.Systems", "System")
                        .WithMany()
                        .HasForeignKey("systemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Users.DomainUser", "users")
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");

                    b.Navigation("System");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Domain.SystemRoles", b =>
                {
                    b.HasOne("Domain.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Roles", null)
                        .WithMany("SystemRole")
                        .HasForeignKey("RolesId");

                    b.HasOne("Domain.Systems", null)
                        .WithMany("SystemRole")
                        .HasForeignKey("SystemsId");

                    b.HasOne("Domain.Systems", "System")
                        .WithMany()
                        .HasForeignKey("systemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("System");
                });

            modelBuilder.Entity("Domain.SystemRolesPermission", b =>
                {
                    b.HasOne("Domain.Permisions", null)
                        .WithMany("SystemRolesPermission")
                        .HasForeignKey("PermisionsId");

                    b.HasOne("Domain.Permisions", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Roles", null)
                        .WithMany("SystemRolesPermission")
                        .HasForeignKey("RolesId");

                    b.HasOne("Domain.SystemPermission", null)
                        .WithMany("SystemRolesPermission")
                        .HasForeignKey("SystemPermissionId");

                    b.HasOne("Domain.SystemRoles", null)
                        .WithMany("SystemRolesPermission")
                        .HasForeignKey("SystemRolesId");

                    b.HasOne("Domain.Systems", null)
                        .WithMany("SystemRolesPermission")
                        .HasForeignKey("SystemsId");

                    b.HasOne("Domain.Systems", "System")
                        .WithMany()
                        .HasForeignKey("systemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("System");
                });

            modelBuilder.Entity("Domain.SystemUserPermission", b =>
                {
                    b.HasOne("Domain.Users.DomainUser", null)
                        .WithMany("SystemUserPermission")
                        .HasForeignKey("DomainUserId");

                    b.HasOne("Domain.Permisions", null)
                        .WithMany("SystemUserPermission")
                        .HasForeignKey("PermisionsId");

                    b.HasOne("Domain.Permisions", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Systems", null)
                        .WithMany("SystemUserPermission")
                        .HasForeignKey("SystemsId");

                    b.HasOne("Domain.Systems", "System")
                        .WithMany()
                        .HasForeignKey("systemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Users.DomainUser", "users")
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Permission");

                    b.Navigation("System");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Domain.SystemUserRolePermission", b =>
                {
                    b.HasOne("Domain.Users.DomainUser", null)
                        .WithMany("SystemUserRolePermission")
                        .HasForeignKey("DomainUserId");

                    b.HasOne("Domain.Permisions", null)
                        .WithMany("SystemUserRolePermission")
                        .HasForeignKey("PermisionsId");

                    b.HasOne("Domain.Permisions", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Roles", null)
                        .WithMany("SystemUserRolePermission")
                        .HasForeignKey("RolesId");

                    b.HasOne("Domain.SystemRoles", null)
                        .WithMany("SystemUserRolePermission")
                        .HasForeignKey("SystemRolesId");

                    b.HasOne("Domain.Systems", null)
                        .WithMany("SystemUserRolePermission")
                        .HasForeignKey("SystemsId");

                    b.HasOne("Domain.Systems", "System")
                        .WithMany()
                        .HasForeignKey("systemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Users.DomainUser", "users")
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("System");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Domain.Permisions", b =>
                {
                    b.Navigation("SystemPermision");

                    b.Navigation("SystemRolesPermission");

                    b.Navigation("SystemUserPermission");

                    b.Navigation("SystemUserRolePermission");
                });

            modelBuilder.Entity("Domain.SystemPermission", b =>
                {
                    b.Navigation("SystemRolesPermission");
                });

            modelBuilder.Entity("Domain.SystemRoles", b =>
                {
                    b.Navigation("SystemRolesPermission");

                    b.Navigation("SystemUserRolePermission");
                });

            modelBuilder.Entity("Domain.Systems", b =>
                {
                    b.Navigation("SystemPermission");

                    b.Navigation("SystemRole");

                    b.Navigation("SystemRoleUser");

                    b.Navigation("SystemRolesPermission");

                    b.Navigation("SystemUserPermission");

                    b.Navigation("SystemUserRolePermission");
                });

            modelBuilder.Entity("Domain.Users.DomainUser", b =>
                {
                    b.Navigation("SystemRoleUser");

                    b.Navigation("SystemUserPermission");

                    b.Navigation("SystemUserRolePermission");
                });

            modelBuilder.Entity("Domain.Roles", b =>
                {
                    b.Navigation("SystemRole");

                    b.Navigation("SystemRoleUser");

                    b.Navigation("SystemRolesPermission");

                    b.Navigation("SystemUserRolePermission");
                });
#pragma warning restore 612, 618
        }
    }
}
